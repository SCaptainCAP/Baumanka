        -:    0:Source:test.c
        -:    0:Graph:./test.gcno
        -:    0:Data:./test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "realization.h"
        -:    2:#include <stdio.h>
        -:    3:#include <string.h>
        -:    4:#define PREC 0.1
        -:    5:
        7:    6:int my_strcmp(const char* str1, const char* str2) {
        7:    7:    if (my_strlen(str1) != my_strlen(str2))
    #####:    8:        return 0;
       42:    9:    for (int i = 0; i < my_strlen(str1); i++) {
       35:   10:        if (str1[i] != str2[i])
    #####:   11:            return 0;
        -:   12:    }
        7:   13:    return 1;
        -:   14:}
        -:   15:
        1:   16:int test_replacer()
        -:   17:{
        1:   18:    printf("Testing replacer...\n");
        -:   19:
        1:   20:    int error = 0;
        -:   21:
        1:   22:    if (!my_strcmp(replacer("Kusty", "ty", "my"), "Kusmy")) error++;
        1:   23:    if (!my_strcmp(replacer("Kusty", "ty", ""), "Kus")) error++;
        1:   24:    if (!my_strcmp(replacer("pripvetp", "p", "R"), "RriRvetR")) error++;
        1:   25:    if (!my_strcmp(replacer("aaaa", "aa", "aaa"), "aaaaaa")) error++;
        1:   26:    if (!my_strcmp(replacer("aaa", "bbb", "c"), "aaa")) error++;
        1:   27:    if (!my_strcmp(replacer("test", "aaa", "my"), "test")) error++;
        1:   28:    if (!my_strcmp(replacer("Kustyc", "ty", "my"), "Kusmyc")) error++;
        -:   29:
        1:   30:    if (error == 0)
        1:   31:        printf("Done!\n\n");
        -:   32:    else
    #####:   33:        printf("There are %d errors\n",error);
        1:   34:    return error;
        -:   35:}
        -:   36:
    #####:   37:int test_my_strlen()
        -:   38:{
    #####:   39:    printf("Testing my_strlen...\n");
        -:   40:
    #####:   41:    int error = 0;
        -:   42:
    #####:   43:    if (!(my_strlen("") == 0)) error++;
    #####:   44:    if (!(my_strlen("abc") == 3)) error++;
    #####:   45:    if (!(my_strlen("qwerty") == 6)) error++;
        -:   46:
    #####:   47:    if (!(my_strlen("") == strlen(""))) error++;
    #####:   48:    if (!(my_strlen("abc") == strlen("abc"))) error++;
    #####:   49:    if (!(my_strlen("qwertyqwe") == strlen("qwertyqwe"))) error++;
        -:   50:
    #####:   51:    if (error == 0)
    #####:   52:        printf("Done!\n\n");
        -:   53:    else
    #####:   54:        printf("There are %d errors\n",error);
    #####:   55:    return error;
        -:   56:}
        -:   57:
    #####:   58:int test_my_strdup()
        -:   59:{
    #####:   60:    printf("Testing my_strdup...\n");
        -:   61:
    #####:   62:    int error = 0;
        -:   63:
    #####:   64:    char* tmp = my_strdup("abc");
    #####:   65:    if (!my_strcmp(tmp, "abc")) error++;
    #####:   66:    free(tmp);
        -:   67:
    #####:   68:    tmp = my_strdup("");
    #####:   69:    if (!my_strcmp(tmp, "")) error++;
    #####:   70:    free(tmp);
        -:   71:
    #####:   72:    if (error == 0)
    #####:   73:        printf("Done!\n\n");
        -:   74:    else
    #####:   75:        printf("There are %d errors\n",error);
    #####:   76:    return error;
        -:   77:}
        -:   78:
    #####:   79:int test_read_line_from_file()
        -:   80:{
    #####:   81:    printf("Testing read_line_from_file...\n");
        -:   82:
    #####:   83:    int error = 0;
        -:   84:
    #####:   85:    FILE* f = fopen("tests/rlff1.txt", "r");
    #####:   86:    char* tmp = read_line_from_file(f);
    #####:   87:    if (!my_strcmp(tmp, "abc")) error++;
    #####:   88:    free(tmp);
        -:   89:
    #####:   90:    tmp = read_line_from_file(f);
    #####:   91:    if (!my_strcmp(tmp, "def")) error++;
    #####:   92:    free(tmp);
        -:   93:
    #####:   94:    tmp = read_line_from_file(f);
    #####:   95:    if (!my_strcmp(tmp, "g")) error++;
    #####:   96:    free(tmp);
        -:   97:
    #####:   98:    tmp = read_line_from_file(f);
    #####:   99:    if (tmp != NULL) error++;
        -:  100:
    #####:  101:    fclose(f);
        -:  102:
        -:  103:
    #####:  104:    f = fopen("tests/rlff2.txt", "r");
    #####:  105:    tmp = read_line_from_file(f);
    #####:  106:    if (tmp != NULL) error++;
        -:  107:
    #####:  108:    fclose(f);
        -:  109:
    #####:  110:    if (error == 0)
    #####:  111:        printf("Done!\n\n");
        -:  112:    else
    #####:  113:        printf("There are %d errors\n",error);
    #####:  114:    return error;
        -:  115:}
        -:  116:
    #####:  117:int test_my_strspn()
        -:  118:{
    #####:  119:    printf("Testing my_strspn...\n");
        -:  120:
    #####:  121:    int error = 0;
        -:  122:
    #####:  123:    if (!(my_strspn("", "") == 0)) error++;
    #####:  124:    if (!(my_strspn("abc", "abc") == 3)) error++;
    #####:  125:    if (!(my_strspn("privet", "pivo") == 1)) error++;
    #####:  126:    if (!(my_strspn("pivet", "pivo") == 3)) error++;
        -:  127:
    #####:  128:    if (error == 0)
    #####:  129:        printf("Done!\n\n");
        -:  130:    else
    #####:  131:        printf("There are %d errors\n",error);
    #####:  132:    return error;
        -:  133:}
        -:  134:
        1:  135:int main()
        -:  136:{
        1:  137:    test_replacer();
        -:  138:    //test_my_strlen();
        -:  139:    //test_my_strdup();
        -:  140:    //test_my_strspn();
        -:  141:    //test_read_line_from_file();
        -:  142:}
